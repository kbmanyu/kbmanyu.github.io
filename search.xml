<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/07/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>测试</title>
    <url>/2023/07/04/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h3 id="测试1">测试1</h3>
<p>测试代码块</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);<span class="comment">//这是一个很长长长长长长长长长长长长长长的注释</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="测试2">测试2</h3>
<p>测试复制超过字数，加上copyright</p>
<p># anchor<br>
# when you scroll in post , the url will update according to header id.<br>
anchor:<br>
button:<br>
enable: false<br>
always_show: false<br>
icon: # the unicode value of Font Awesome icon, such as ‘\3423’<br>
auto_update: false # when you scroll in post, the URL will update according to header id.</p>
<p>作者: Jerry<br>
連結: <a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%B8%BB%E9%A0%81%E6%96%87%E7%AB%A0%E7%AF%80%E9%81%B8-%E8%87%AA%E5%8B%95%E7%AF%80%E9%81%B8%E5%92%8C%E6%96%87%E7%AB%A0%E9%A0%81description">https://butterfly.js.org/posts/4aa8abbe/#主頁文章節選-自動節選和文章頁description</a><br>
來源: Butterfly<br>
著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p>
<hr>
<h3 id="测试3">测试3</h3>
<p>测试数学公式</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a+b=c
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span></span></p>
<h3 id="测试4">测试4</h3>
<p>添加图片<br>
<img src="/img/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE/230704%E6%B5%8B%E8%AF%95/%E9%B2%B8%E7%9A%84%E7%A7%98%E5%AF%86.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>测试</tag>
        <tag>代码</tag>
        <tag>主题设置</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言实现扫雷</title>
    <url>/2023/07/05/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/</url>
    <content><![CDATA[<blockquote>
<p>扫雷是一款经典的能够锻炼思维与思考能力的小游戏。其最早可以追溯到1973年的一款叫“方块”&gt; 的游戏。经过二十年发展，扫雷游戏出现在了Windowns3.1系统上，这极大推动了这款小游戏的普及。</p>
<p>扫雷游戏的玩法分为：初级(9*9)、中级(16*16)、高级(16*30)、自定义。<br>
我们以<strong>初级玩法</strong>为例，通过C语言来实现扫雷；首先是实现==基础功能==，再对其进行==扩展==。</p>
<p>本文将从零开始，一步一步推进，目的在于训练编程思维。那就开始吧！:smirk</p>
</blockquote>
<hr>
<p><strong>目录</strong></p>
<p><a href="#1%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF">1设计思路</a><br>
<a href="#2-%E6%89%AB%E9%9B%B7%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD">2-扫雷基础功能</a><br>
<a href="#21-%E8%8F%9C%E5%8D%95%E4%B8%8E%E5%8A%9F%E8%83%BD%E9%80%89%E6%8B%A9">2.1-菜单与功能选择</a><br>
<a href="#22-%E6%B8%B8%E6%88%8F%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1">2.2-游戏功能函数设计</a><br>
<a href="#23-%E6%B8%B8%E6%88%8F%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0">2.3-游戏功能函数实现</a><br>
<a href="#231-%E5%AE%9A%E4%B9%89%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96">2.3.1-定义和初始化</a><br>
<a href="#232-%E6%89%93%E5%8D%B0%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84">2.3.2-打印二维数组</a><br>
<a href="#233-%E6%B7%BB%E5%8A%A0%E9%9B%B7%E5%9D%90%E6%A0%87">2.3.3-添加雷坐标</a><br>
<a href="#234-%E6%8E%92%E9%9B%B7">2.3.4-排雷</a><br>
<a href="#24-%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA">2.4-基础功能效果展示</a><br>
<a href="#3-%E6%89%AB%E9%9B%B7%E6%8B%93%E5%B1%95%E5%8A%9F%E8%83%BD">3-扫雷拓展功能</a><br>
<a href="#31-%E6%A0%87%E8%AE%B0%E5%8A%9F%E8%83%BD">3.1-标记功能</a><br>
<a href="#32-%E5%B1%95%E5%BC%80%E5%8A%9F%E8%83%BD">3.2-展开功能</a><br>
<a href="#33-%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD%E6%95%88%E6%9E%9C%E6%BC%94%E7%A4%BA">3.3-扩展功能效果演示</a><br>
<a href="#4-%E6%80%BB%E7%BB%93">4-总结</a><br>
<a href="#5-%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81">5-完整代码</a></p>
<hr>
<h2 id="设计思路">设计思路</h2>
<p>项目文件</p>
<ul>
<li>test.c - 实现游戏主要逻辑</li>
<li>game.c - 实现游戏功能函数定义</li>
<li>game.h - 实现游戏功能函数声明及宏定义</li>
</ul>
<hr>
<h2 id="扫雷基础功能">扫雷基础功能</h2>
<h3 id="菜单与功能选择">菜单与功能选择</h3>
<p>首先在test.c的主函数中，完成菜单打印与功能选择循环的逻辑。<br>
循环条件，即功能选择，由玩家的输入决定，所以定义一个整型变量input接收玩家输入功能选择。<br>
1表示进入游戏，0表示退出，其他输入则错误！</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*******  1.play  *********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*******  0.exit  *********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择:&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">        <span class="keyword">switch</span> (input)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            game();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出游戏！\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;选择错误\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="游戏功能函数设计">游戏功能函数设计</h3>
<p>现在来设计游戏的功能，即case 1中game()函数的功能。game()函数放到main函数前面。既然扫雷在一个平面进行，用横纵坐标来表示其上的位置，很自然会想到用二维数组来存放雷的信息。<br>
游戏与玩家交互需要打印二维数组，如果我们直接打印存放雷位置信息的二维数组，那就没得玩了，所以还需要定义一个相同大小的二维数组，用于存放排查信息，用于打印显示玩家排查的情况。</p>
<p>所以我们定义两个二维数组：</p>
<ul>
<li>char mine[][] - 用于存放雷的坐标位置。
<ul>
<li>'1’表示有雷</li>
<li>'0’表示无雷</li>
</ul>
</li>
<li>char show[][] - 用于存放排查信息，用于打印。
<ul>
<li>'*'表示未排查</li>
<li>'n’表示排查坐标作为雷的个数，n属于0-8</li>
</ul>
</li>
</ul>
<p>那我们的二维数组给多大呢？要实现的是9*9的扫雷，就直接给9*9吗？</p>
<p>我们排查一个坐标点的时候，需要去遍历它周围点的信息，那边缘的和中间的坐标点周围的点的个数不一样，我们如何解决呢？通过条件判断吗？</p>
<p>其实有个更好一点的办法，那就是将二维数组给的大一圈，即长宽都+2。这样一来，我们不用去判断雷区的边缘，真正的游戏区域从1开始到9结束就可以了。</p>
<p>为了便于修改，我们将行和列的大小做如下宏定义放在game.h中。并且为了方便我们的边写边调试，我们把必要的头文件在game.h中包一下。在test.c和game.c中包含game.h就可以了。</p>
<p>game.h放入如下内容：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GAME_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GAME_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 9   <span class="comment">//游戏的行数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 9   <span class="comment">//游戏的列数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROWS (ROW+2)    <span class="comment">//存放信息的二维数组的行数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROWS (COL+2)    <span class="comment">//存放信息的二维数组的列数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EASY_COUNT 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">char</span> ch)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SetMine</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FindMine</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">char</span> show[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="游戏功能函数实现">游戏功能函数实现</h3>
<h4 id="定义和初始化">定义和初始化</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> mine[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存放布置好的雷的信息</span></span><br><span class="line">    <span class="type">char</span> show[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存放排查出的雷的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数组内容为指定内容</span></span><br><span class="line">    <span class="comment">// mine - 数组在没有布置雷的时候，全为&#x27;0&#x27;</span></span><br><span class="line">    InitBoard(mine, ROWS, COLS,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="comment">// show - 数组在没有排查雷的时候，全为&#x27;*&#x27;</span></span><br><span class="line">    InitBoard(show, ROWS, COLS, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>==InitBoard()在game.c中定义，在game.h中声明。==</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">char</span> ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            board[i][j] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="打印二维数组">打印二维数组</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> mine[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存放布置好的雷的信息</span></span><br><span class="line">    <span class="type">char</span> show[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存放排查出的雷的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数组内容为指定内容</span></span><br><span class="line">    <span class="comment">// mine - 数组在没有布置雷的时候，全为&#x27;0&#x27;</span></span><br><span class="line">    InitBoard(mine, ROWS, COLS,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="comment">// show - 数组在没有排查雷的时候，全为&#x27;*&#x27;</span></span><br><span class="line">    InitBoard(show, ROWS, COLS, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    DisplayBoard(show, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>DisplayBoard()同上，做好定义和声明。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------------扫雷-------------\n&quot;</span>);</span><br><span class="line">    <span class="comment">//第一行打印列号</span></span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= col; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);<span class="comment">//每行开头打印行号</span></span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, board[i][j]);<span class="comment">//打印游戏信息，注意打印范围，只需1-9</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------------扫雷-------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然，在调试的时候，你可以将两个数组都打印出来看一下，初始化是否正确</p>
</blockquote>
<hr>
<h4 id="添加雷坐标">添加雷坐标</h4>
<p>继续在game中添加功能函数。SetMine()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> mine[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存放布置好的雷的信息</span></span><br><span class="line">    <span class="type">char</span> show[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存放排查出的雷的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数组内容为指定内容</span></span><br><span class="line">    <span class="comment">// mine - 数组在没有布置雷的时候，全为&#x27;0&#x27;</span></span><br><span class="line">    InitBoard(mine, ROWS, COLS,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="comment">// show - 数组在没有排查雷的时候，全为&#x27;*&#x27;</span></span><br><span class="line">    InitBoard(show, ROWS, COLS, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    DisplayBoard(show, ROW, COL);</span><br><span class="line"></span><br><span class="line">    SetMine(mine, ROW, COL);</span><br><span class="line">    DisplayBoard(mine, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>SetMine()，定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SetMine</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = EASY_COUNT;<span class="comment">//设置雷的数量，EAST_COOUNT在game.h中进行宏定义</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (count)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 随机生成雷的x，y坐标。</span></span><br><span class="line">        x = rand() % row + <span class="number">1</span>;</span><br><span class="line">        y = rand() % col + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (board[x][y] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            board[x][y] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// srand()函数初始化随机数发生器，</span></span><br><span class="line"><span class="comment">// 否则生成的随机数是伪随机数，即每次生成相同的随机数列。</span></span><br><span class="line"><span class="comment">// 在test.c的主函数中，循环前面加上下面这行代码。</span></span><br><span class="line">srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="排雷">排雷</h4>
<p>上面一步，游戏初始化完成，现开始写玩家玩游戏时的函数。<br>
game中添加FindMine()函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> mine[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存放布置好的雷的信息</span></span><br><span class="line">    <span class="type">char</span> show[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存放排查出的雷的信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数组内容为指定内容</span></span><br><span class="line">    <span class="comment">// mine - 数组在没有布置雷的时候，全为&#x27;0&#x27;</span></span><br><span class="line">    InitBoard(mine, ROWS, COLS,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="comment">// show - 数组在没有排查雷的时候，全为&#x27;*&#x27;</span></span><br><span class="line">    InitBoard(show, ROWS, COLS, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    DisplayBoard(show, ROW, COL);</span><br><span class="line"></span><br><span class="line">    SetMine(mine, ROW, COL);</span><br><span class="line">    DisplayBoard(mine, ROW, COL);</span><br><span class="line"></span><br><span class="line">    FindMine(mine, show, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>排雷函数：<br>
我们需要定义一个赢的标准，那就是将不是雷的坐标全部排查出来，定义一个win变量，当玩家每排查一个坐标，且这个坐标不是雷的时候，进行自增1的操作。当win等于非雷坐标点个数时排雷成功！</p>
<p>由于内容较多，我将代码的逻辑直接注释代码中</p>
</blockquote>
<p>FindMine()函数定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此函数为game.c的内部函数，所以不用在game.h中声明</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_mine_count</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算包括自己在内的9个坐标的个数，雷为&#x27;1&#x27;，非雷为&#x27;0&#x27;</span></span><br><span class="line">    <span class="comment">// &#x27;1&#x27;的ADSCII码为49，&#x27;0&#x27;的为48。</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">-1</span>; i &lt;= <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">-1</span>; j &lt;= <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ret += board[x + i][y + j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ret -= <span class="number">9</span> * <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此函数需要在game.h中声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FindMine</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">char</span> show[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> win = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排查不可能一次就完成，所以我们要将所有的内容放在一个循环中</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 玩家输入排查坐标</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入排查的坐标:&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断坐标是否合法，合法进入雷的排查判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= col)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 判断坐标是否排查过，目的是避免重复排查，导致win重复计数，导致其失效</span></span><br><span class="line">            <span class="comment">// &#x27;*&#x27;表示未排查过</span></span><br><span class="line">            <span class="keyword">if</span> (show[x][y] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果是雷</span></span><br><span class="line">                <span class="keyword">if</span> (mine[x][y] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;很遗憾，你被炸死了！\n&quot;</span>);</span><br><span class="line">                    DisplayBoard(mine, ROW, COL);<span class="comment">//打印雷区信息，死个明白</span></span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//游戏结束，退出此循环</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果不是雷，计算该坐标周围雷的个数</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    win++;<span class="comment">//成功排掉一个非雷坐标，win+1</span></span><br><span class="line">                    <span class="type">int</span> count = get_mine_count(mine, x, y);<span class="comment">//调用本文件内部函数得到此坐标周围雷的个数</span></span><br><span class="line">                    show[x][y] = count + <span class="string">&#x27;0&#x27;</span>;<span class="comment">//更新显示的二维数组</span></span><br><span class="line">                    DisplayBoard(show, ROW, COL);<span class="comment">//打印出来</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 排查过，重新输入</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;该坐标已排查过，不能重复排查！\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则重新输入</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入:&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次循环都会判断，非雷坐标是否排查完</span></span><br><span class="line">        <span class="keyword">if</span>(win == row * col - EASY_COUNT)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，排雷成功！\n&quot;</span>);</span><br><span class="line">            DisplayBoard(mine, ROW, COL);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="基础功能效果展示">基础功能效果展示</h3>
<blockquote>
<p>至此，扫雷的基本功能已经实现。我们来看一下效果。</p>
</blockquote>
<ul>
<li>
<p>游戏开始，模式选择<br>
<img src="/img/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE/230705C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/image-1.png" alt="选择菜单"></p>
</li>
<li>
<p>选择1，开始游戏。因为是测试，我就把雷坐标信息也打出来了<br>
<img src="/img/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE/230705C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/image-2.png" alt="雷盘显示"></p>
</li>
<li>
<p>排查一个非雷坐标<br>
<img src="/img/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE/230705C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/image-3.png" alt="排雷开始"></p>
</li>
<li>
<p>排雷成功，并进行下一次菜单选择<br>
<img src="/img/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE/230705C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/image-4.png" alt="排雷成功"></p>
</li>
<li>
<p>踩雷的情况，打印雷区坐标，并进行下一次选择<br>
<img src="/img/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE/230705C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/image-5.png" alt="Alt text"></p>
</li>
</ul>
<hr>
<h2 id="扫雷拓展功能">扫雷拓展功能</h2>
<h3 id="标记功能">标记功能</h3>
<p>在排雷的过程中我们需要排查出的雷标记出来，以便于我们继续排雷。<br>
这个功能的还是相对简单的，只需修改FindMine函数。==用’m’表示标记为雷==，放在打印的数组中。<br>
在FindMine中添加内容，整体代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">FindMine</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">char</span> show[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> win = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> mark = <span class="string">&#x27;0&#x27;</span>;<span class="comment">//定义一个字符变量mark来存储获取到的字符，初始化为&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排查不可能一次就完成，所以我们要将所有的内容放在一个循环中</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        getchar();<span class="comment">//先将缓冲区的换行符拿掉</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择标记雷或排雷(m为标记，其他为排雷):&gt;&quot;</span>);<span class="comment">//首先获取一个字符，务必是一个字符，不然输入缓冲区会内容会堆积，处理起来比较麻烦。</span></span><br><span class="line">        mark = getchar();<span class="comment">//从缓冲区拿到一个字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 玩家输入排查坐标</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入排查的坐标:&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断坐标是否合法，合法进入雷的排查判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= col)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 判断坐标是否排查过，目的是避免重复排查，导致win重复计数，导致其失效</span></span><br><span class="line">            <span class="comment">// &#x27;*&#x27;表示未排查过</span></span><br><span class="line">            <span class="comment">// 若出现标记错误，想要取消标记，想要实现此功能，我们要让已标记的坐标</span></span><br><span class="line">            <span class="comment">// 依然可以进入排查状态，故添加以下判断条件</span></span><br><span class="line">            <span class="keyword">if</span> (show[x][y] == <span class="string">&#x27;*&#x27;</span> || show[x][y] == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果是标记</span></span><br><span class="line">                <span class="keyword">if</span> (mark == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 取消标记</span></span><br><span class="line">                    <span class="keyword">if</span> (show[x][y] == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        show[x][y] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 标记</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        show[x][y] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    DisplayBoard(show, ROW, COL);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果是排雷，将基础功能的排雷模块，放到else里面</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">// 如果是雷</span></span><br><span class="line">                  <span class="keyword">if</span> (mine[x][y] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">&quot;很遗憾，你被炸死了！\n&quot;</span>);</span><br><span class="line">                      DisplayBoard(mine, ROW, COL);<span class="comment">//打印雷区信息，死个明白</span></span><br><span class="line">                      <span class="keyword">break</span>;<span class="comment">//游戏结束，退出此循环</span></span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">// 如果不是雷，计算该坐标周围雷的个数</span></span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                  &#123;</span><br><span class="line">                      win++;<span class="comment">//成功排掉一个非雷坐标，win+1</span></span><br><span class="line">                      <span class="type">int</span> count = get_mine_count(mine, x, y);<span class="comment">//调用本文件内部函数得到此坐标周围雷的个数</span></span><br><span class="line">                      show[x][y] = count + <span class="string">&#x27;0&#x27;</span>;<span class="comment">//更新显示的二维数组</span></span><br><span class="line">                      DisplayBoard(show, ROW, COL);<span class="comment">//打印出来</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 排查过，重新输入</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;该坐标已排查过，不能重复排查！\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则重新输入</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入:&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次循环都会判断，非雷坐标是否排查完</span></span><br><span class="line">        <span class="keyword">if</span>(win == row * col - EASY_COUNT)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，排雷成功！\n&quot;</span>);</span><br><span class="line">            DisplayBoard(mine, ROW, COL);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="展开功能">展开功能</h3>
<p>若一个坐标不是雷，它周围有雷，那么标记周围雷的个数；若它周围没有雷，则进一步判断它周围坐标的周围有没有雷，这样一层一层的展开出去，我们采用递归调用的方式实现这样判断。</p>
<blockquote>
<p>注意：在递归调用的过程中，已经判断过的坐标不能再去判断，否则会出现死递归。</p>
</blockquote>
<p>该递归函数，本质还是寻找非雷的坐标点，所以起名get_mine_info()，放在FindMine()函数之前，get_mine_count()函数之后，原因是FindMine中的排雷模块需要调用这个递归函数，此函数会调用get_mine_count函数。代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">get_mine_info</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">char</span> show[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> *win)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 条件1，该坐标不是雷，进入到此函数，条件1已经是满足了。</span></span><br><span class="line">    <span class="comment">// 现在判断第二个条件，即判断该坐标周围是否有雷</span></span><br><span class="line">    <span class="type">int</span> count = get_mine_count(mine, x, y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果该坐标没有雷，进入下一层</span></span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        show[x][y] = <span class="string">&#x27; &#x27;</span>;<span class="comment">//没有雷的坐标这里用空格填充，更加美观</span></span><br><span class="line">        (*win)++;<span class="comment">//排查非雷坐标，win自增1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断周围的坐标周围有没有雷</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x - <span class="number">1</span>; i &lt;= x + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = y - <span class="number">1</span>; j &lt;= y + <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 递归终止条件，即超过雷盘退出</span></span><br><span class="line">                <span class="comment">// 防止重复判断一个坐标，即判断是否排查或者标记过</span></span><br><span class="line">                <span class="keyword">if</span> ((i &gt;= <span class="number">1</span> &amp;&amp; i &lt;= row &amp;&amp; j &gt;= <span class="number">1</span> &amp;&amp; j &lt;= col) &amp;&amp; (show[i][j] == <span class="string">&#x27;*&#x27;</span> || show[i][j] == <span class="string">&#x27;m&#x27;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    get_mine_info(mine, show, row, col, i, j, win);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果周围有雷，不进入递归</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        (*win)++;<span class="comment">//排查出非雷坐标，win++</span></span><br><span class="line">        show[x][y] = count + <span class="string">&#x27;0&#x27;</span>;<span class="comment">//更新显示信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>==现在FindMine的排雷模块中调用此函数==，FindMine整体代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">FindMine</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">char</span> show[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> win = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> mark = <span class="string">&#x27;0&#x27;</span>;<span class="comment">//定义一个字符变量mark来存储获取到的字符，初始化为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排查不可能一次就完成，所以我们要将所有的内容放在一个循环中</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        getchar();<span class="comment">//先将缓冲区的换行符拿掉</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择标记雷或排雷(m为标记，其他为排雷):&gt;&quot;</span>);<span class="comment">//首先获取一个字符，务必是一个字符，不然输入缓冲区会内容会堆积，处理起来比较麻烦。</span></span><br><span class="line">        mark = getchar();<span class="comment">//从缓冲区拿到一个字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 玩家输入排查坐标</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入排查的坐标:&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断坐标是否合法，合法进入雷的排查判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= col)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 判断坐标是否排查过，目的是避免重复排查，导致win重复计数，导致其失效</span></span><br><span class="line">            <span class="comment">// &#x27;*&#x27;表示未排查过</span></span><br><span class="line">            <span class="comment">// 若出现标记错误，想要取消标记，想要实现此功能，我们要让已标记的坐标</span></span><br><span class="line">            <span class="comment">// 依然可以进入排查状态，故添加以下判断条件</span></span><br><span class="line">            <span class="keyword">if</span> (show[x][y] == <span class="string">&#x27;*&#x27;</span> || show[x][y] == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果是标记</span></span><br><span class="line">                <span class="keyword">if</span> (mark == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 取消标记</span></span><br><span class="line">                    <span class="keyword">if</span> (show[x][y] == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        show[x][y] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 标记</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        show[x][y] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    DisplayBoard(show, ROW, COL);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果是排雷，将基础功能的排雷模块，放到else里面</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">// 如果是雷</span></span><br><span class="line">                  <span class="keyword">if</span> (mine[x][y] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">&quot;很遗憾，你被炸死了！\n&quot;</span>);</span><br><span class="line">                      DisplayBoard(mine, ROW, COL);<span class="comment">//打印雷区信息，死个明白</span></span><br><span class="line">                      <span class="keyword">break</span>;<span class="comment">//游戏结束，退出此循环</span></span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">// 如果不是雷，计算该坐标周围雷的个数</span></span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="comment">//   win++;//成功排掉一个非雷坐标，win+1</span></span><br><span class="line">                    <span class="comment">//   int count = get_mine_count(mine, x, y);//调用本文件内部函数得到此坐标周围雷的个数</span></span><br><span class="line">                    <span class="comment">//   show[x][y] = count + &#x27;0&#x27;;//更新显示的二维数组</span></span><br><span class="line">                    <span class="comment">//   DisplayBoard(show, ROW, COL);//打印出来</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 调用递归函数完成，雷的排查</span></span><br><span class="line">                    get_mine_info(mine, show, row, col, x, y, &amp;win);</span><br><span class="line">                    DisplayBoard(show, ROW, COL);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 排查过，重新输入</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;该坐标已排查过，不能重复排查！\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则重新输入</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入:&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次循环都会判断，非雷坐标是否排查完</span></span><br><span class="line">        <span class="keyword">if</span>(win == row * col - EASY_COUNT)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，排雷成功！\n&quot;</span>);</span><br><span class="line">            DisplayBoard(show, ROW, COL);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="扩展功能效果演示">扩展功能效果演示</h3>
<ul>
<li>
<p>标记功能<br>
<img src="/img/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE/230705C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/image-7.png" alt="标记功能"></p>
</li>
<li>
<p>展开功能<br>
<img src="/img/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE/230705C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/image-8.png" alt="展开功能"></p>
</li>
<li>
<p>排雷成功<br>
<img src="/img/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE/230705C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/image-9.png" alt="排雷成功"></p>
</li>
<li>
<p>排雷失败<br>
<img src="/img/%E6%96%87%E7%AB%A0%E9%85%8D%E5%9B%BE/230705C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/image-10.png" alt="排雷失败"></p>
</li>
</ul>
<hr>
<h2 id="总结">总结</h2>
<p>本项目实现了扫雷的基础功能，以及普通的扩展功能；还存在可以很多优化，扩展的地方，大家有需要的话，可以自己发挥。<br>
由于笔者也是初学者，能力和知识储备有限，难免会有错误、纰漏。如果大家发现文章以及代码有任何问题的地方，欢迎指出讨论。</p>
<hr>
<h2 id="完整代码">完整代码</h2>
<blockquote>
<p>test.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*******  1.play  *********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*******  0.exit  *********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">game</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> mine[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存放不知好的雷的信息</span></span><br><span class="line">    <span class="type">char</span> show[ROWS][COLS] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存放排查出的雷的信息</span></span><br><span class="line">    <span class="comment">// 不论是一维数组还是二维数组，定义的时候初始化，只能给大括号数值0，注意不是&#x27;0&#x27;，而是0</span></span><br><span class="line">    <span class="comment">// 如果给了非0的内容，那么数组只有第一个元素为给定值，后面的元素全为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数组内容为指定内容</span></span><br><span class="line">    <span class="comment">// mine - 数组在没有布置雷的时候，全为&#x27;0&#x27;</span></span><br><span class="line">    InitBoard(mine, ROWS, COLS,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="comment">// show - 数组在没有排查雷的时候，全为&#x27;*&#x27;</span></span><br><span class="line">    InitBoard(show, ROWS, COLS, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置雷</span></span><br><span class="line">    SetMine(mine, ROW, COL);</span><br><span class="line">    DisplayBoard(mine, ROW, COL);</span><br><span class="line"></span><br><span class="line">    DisplayBoard(show, ROW, COL);</span><br><span class="line">    FindMine(mine, show, ROW, COL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 设置随机数的生成起点</span></span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择:&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">        <span class="keyword">switch</span> (input)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">// printf(&quot;saolei\n&quot;);</span></span><br><span class="line">            game();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;退出游戏！\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;选择错误\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (input);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>game.c</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;game.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">char</span> ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            board[i][j] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------------扫雷-------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= col; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">1</span>; j &lt;= col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, board[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------------扫雷-------------\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SetMine</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = EASY_COUNT;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (count)</span><br><span class="line">    &#123;</span><br><span class="line">        x = rand() % row + <span class="number">1</span>;</span><br><span class="line">        y = rand() % col + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (board[x][y] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            board[x][y] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_mine_count</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算包括自己在内的9个坐标的个数，雷为&#x27;1&#x27;，非雷为&#x27;0&#x27;</span></span><br><span class="line">    <span class="comment">// &#x27;1&#x27;的ADSCII码为49，&#x27;0&#x27;的为48。</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">-1</span>; i &lt;= <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">-1</span>; j &lt;= <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ret += board[x + i][y + j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ret -= <span class="number">9</span> * <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_mine_info</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">char</span> show[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> *win)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 条件1，该坐标不是雷，进入到此函数，条件1已经是满足了。</span></span><br><span class="line">    <span class="comment">// 现在判断第二个条件，即判断该坐标周围是否有雷</span></span><br><span class="line">    <span class="type">int</span> count = get_mine_count(mine, x, y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果该坐标没有雷，进入下一层</span></span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        show[x][y] = <span class="string">&#x27; &#x27;</span>;<span class="comment">//没有雷的坐标这里用空格填充，更加美观</span></span><br><span class="line">        (*win)++;<span class="comment">//排查非雷坐标，win自增1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断周围的坐标周围有没有雷</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x - <span class="number">1</span>; i &lt;= x + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = y - <span class="number">1</span>; j &lt;= y + <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 递归终止条件，即超过雷盘退出</span></span><br><span class="line">                <span class="comment">// 防止重复判断一个坐标，即判断是否排查或者标记过</span></span><br><span class="line">                <span class="keyword">if</span> ((i &gt;= <span class="number">1</span> &amp;&amp; i &lt;= row &amp;&amp; j &gt;= <span class="number">1</span> &amp;&amp; j &lt;= col) &amp;&amp; (show[i][j] == <span class="string">&#x27;*&#x27;</span> || show[i][j] == <span class="string">&#x27;m&#x27;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    get_mine_info(mine, show, row, col, i, j, win);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果周围有雷，不进入递归</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        (*win)++;<span class="comment">//排查出非雷坐标，win++</span></span><br><span class="line">        show[x][y] = count + <span class="string">&#x27;0&#x27;</span>;<span class="comment">//更新显示信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">FindMine</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">char</span> show[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> win = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> mark = <span class="string">&#x27;0&#x27;</span>;<span class="comment">//定义一个字符变量mark来存储获取到的字符，初始化为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排查不可能一次就完成，所以我们要将所有的内容放在一个循环中</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        getchar();<span class="comment">//先将缓冲区的换行符拿掉</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请选择标记雷或排雷(m为标记，其他为排雷):&gt;&quot;</span>);<span class="comment">//首先获取一个字符，务必是一个字符，不然输入缓冲区会内容会堆积，处理起来比较麻烦。</span></span><br><span class="line">        mark = getchar();<span class="comment">//从缓冲区拿到一个字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 玩家输入排查坐标</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入排查的坐标:&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断坐标是否合法，合法进入雷的排查判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= col)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 判断坐标是否排查过，目的是避免重复排查，导致win重复计数，导致其失效</span></span><br><span class="line">            <span class="comment">// &#x27;*&#x27;表示未排查过</span></span><br><span class="line">            <span class="comment">// 若出现标记错误，想要取消标记，想要实现此功能，我们要让已标记的坐标</span></span><br><span class="line">            <span class="comment">// 依然可以进入排查状态，故添加以下判断条件</span></span><br><span class="line">            <span class="keyword">if</span> (show[x][y] == <span class="string">&#x27;*&#x27;</span> || show[x][y] == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果是标记</span></span><br><span class="line">                <span class="keyword">if</span> (mark == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 取消标记</span></span><br><span class="line">                    <span class="keyword">if</span> (show[x][y] == <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        show[x][y] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 标记</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        show[x][y] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    DisplayBoard(show, ROW, COL);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果是排雷，将基础功能的排雷模块，放到else里面</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">// 如果是雷</span></span><br><span class="line">                  <span class="keyword">if</span> (mine[x][y] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">&quot;很遗憾，你被炸死了！\n&quot;</span>);</span><br><span class="line">                      DisplayBoard(mine, ROW, COL);<span class="comment">//打印雷区信息，死个明白</span></span><br><span class="line">                      <span class="keyword">break</span>;<span class="comment">//游戏结束，退出此循环</span></span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">// 如果不是雷，计算该坐标周围雷的个数</span></span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="comment">//   win++;//成功排掉一个非雷坐标，win+1</span></span><br><span class="line">                    <span class="comment">//   int count = get_mine_count(mine, x, y);//调用本文件内部函数得到此坐标周围雷的个数</span></span><br><span class="line">                    <span class="comment">//   show[x][y] = count + &#x27;0&#x27;;//更新显示的二维数组</span></span><br><span class="line">                    <span class="comment">//   DisplayBoard(show, ROW, COL);//打印出来</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 调用递归函数完成，雷的排查</span></span><br><span class="line">                    get_mine_info(mine, show, row, col, x, y, &amp;win);</span><br><span class="line">                    DisplayBoard(show, ROW, COL);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 排查过，重新输入</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;该坐标已排查过，不能重复排查！\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则重新输入</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;输入有误，请重新输入:&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次循环都会判断，非雷坐标是否排查完</span></span><br><span class="line">        <span class="keyword">if</span>(win == row * col - EASY_COUNT)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你，排雷成功！\n&quot;</span>);</span><br><span class="line">            DisplayBoard(show, ROW, COL);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>game.h</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GAME_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GAME_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COL 9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROWS (ROW+2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COLS (COL+2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EASY_COUNT 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> rows, <span class="type">int</span> cols, <span class="type">char</span> ch)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DisplayBoard</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SetMine</span><span class="params">(<span class="type">char</span> board[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">FindMine</span><span class="params">(<span class="type">char</span> mine[ROWS][COLS], <span class="type">char</span> show[ROWS][COLS], <span class="type">int</span> row, <span class="type">int</span> col)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
